[
    {
        "summary": "Error in w3af execution bla",
        "severity": "error",
        "desc": "Description"
    },
    {
        "summary": "Error in w3af execution bla2",
        "severity": "error",
        "desc": "Description2"
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js4_dq\", using HTTP method GET. The sent data was: \"in=xbdwr%22xbdwr\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js4_dq",
            "httpTransactions": [
                {
                    "id": 89,
                    "url": "http://192.168.1.35:8082/xss/reflect/js4_dq?in=xbdwr%22xbdwr",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js4_dq?in=xbdwr%22xbdwr HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["406"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:22 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eJavaScript and double-quote injection in JS block (js.4)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = {\n                        date: \"\",\n                        week: \"1\",\n                        bad: \"xbdwr\"xbdwr\",\n                        phase: \"2\",\n                        };\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates exploitable Injection due to unsafe handling of double quotes into a Javascript block.\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/basic\", using HTTP method GET. The sent data was: \"in=\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/basic",
            "httpTransactions": [
                {
                    "id": 172,
                    "url": "http://192.168.1.35:8082/xss/reflect/basic?in=ukokq%3C%2F-%3Eukokq%2F%2Aukokq%22ukokqukokq%27ukokqukokq%60ukokqukokq%20%3D",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/basic?in=ukokq%3C%2F-%3Eukokq%2F%2Aukokq%22ukokqukokq%27ukokqukokq%60ukokqukokq%20%3D HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["57"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:24 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "ukokq\u003c/-\u003eukokq/*ukokq\"ukokqukokq'ukokqukokq`ukokqukokq =\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js3_search_fp\", using HTTP method GET. The sent data was: \"in=v8uzu%20%3D\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js3_search_fp",
            "httpTransactions": [
                {
                    "id": 107,
                    "url": "http://192.168.1.35:8082/xss/reflect/js3_search_fp?in=v8uzu%20%3D",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js3_search_fp?in=v8uzu%20%3D HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:22 GMT"],
                            "Transfer-Encoding": ["chunked"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"\u003e\n                        \u003chtml lang=\"en-US\"\u003e\u003chead\u003e\u003cmeta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"\u003e\u003cscript\u003e(function(){var h=document.documentElement;h.className+=\" js\";(new Image()).src='http://l.yimg.com/pv/i/all/vertical/games/us_srp_metro_games_201401161426.png';})();\u003c/script\u003e\u003clink rel=\"alternate\" type=\"application/rss+xml\" title=\"Yahoo Games Search results for v8uzu =\" href=\"http://games.search.yahoo.com/rss?ei=UTF-8\u0026p=alert%28142%29%3B%28\u0026fr=sfpalert%28142%29%3B%28\"\u003e\u003ctitle\u003ev8uzu = - Yahoo Games Search Results\u003c/title\u003e\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"http://l.yimg.com/pv/lib/s8/vertical/us_srp_purple_games_1_201407092035.css\"\u003e\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"http://l.yimg.com/zz/combo?kx/yucs/uh3/uh/1065/css//uh_non_mail-min.css\u0026kx/yucs/uh_common/meta/3/css/meta-min.css\u0026kx/yucs/uh3/top_bar/313/css/no_icons-min.css\u0026kx/yucs/uh3/breakingnews/css/1/breaking_news-min.css\"\u003e\u003clink rel=\"stylesheet\" type=\"text/css\" href=\"http://l.yimg.com/pv/lib/s8/vertical/srp_bucketbar_yui3_201306051053.css\"\u003e\u003cstyle type=\"text/css\"\u003es,.sprt,.sprite,#ss a.ss-remove,.news-nph,.stars-sm span,.stars-lg span,.thmbplay,.sc-promo-img,.sc-close,.yui3-carousel-nav-item,.yui3-carousel-nav-item-selected,.yui3-carousel-button,#sidebar .bd ul.filter_list li.fts span,#sidebar .bd ul.filter_list li.fts span.active{background-image:url(http://l.yimg.com/pv/i/all/vertical/games/us_srp_metro_games_201401161426.png);}#logo{height: 34px;width: 119px;margin-top: 2px; margin-left: 23px;background-repeat:no-repeat;background-position: 0 0;display: block;overflow: hidden;text-indent: -9999px;}#logo{ background-image:url(http://l.yimg.com/rz/l/yahoo_games_en-US_f_p_119x34.png);*background-image:url(http://l.yimg.com/rz/l/yahoo_games_en-US_f_p_119x34.gif);}@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {#logo{background-image:url(http://l.yimg.com/rz/l/yahoo_games_en-US_f_p_119x34_2x.png); background-size: 119px}}.games-entity-entry .play-button .play-icon,.games-entity-entry .sm-media .default-thumb,#popgame .popgame-img .default-thumb{background-image:url(http://l.yimg.com/pv/i/all/vertical/games/us_srp_metro_games_201401161426.png);}\u003c/style\u003e\u003c/head\u003e\u003cbody id=\"ysch\" class=\"safari webkit mac v4_14\"\u003e\u003cdiv id=\"doc\" class=\"uh3-p\"\u003e\u003ch1 class=\"off-left\"\u003eYahoo Games Web Search\u003c/h1\u003e\u003cstyle\u003e#yucs{padding:0}#yucs .yucs-avatar{width:22px;height:22px}#yucs a#yucs-mail_link_id{_width:30px;_text-indent:0;_background-position:0 -4352px}#yucs-profile{_margin-right:-10px;_width:75px}#yucs #yucs-profile_text .yuhead-name-greeting{display:none}#yucs #yucs-profile_text .yuhead-name{top:0;max-width:65px;_width:40px}#yucs-profile_text{max-width:65px}#yucs #yucs-nav .yucs-menu ul li a:hover,#yucs #yucs-help .yucs-menu ul li a:hover,#yucs .yucs-profile-items-panel a:hover{background-color:transparent;text-decoration:underline}#yucs-top-inner{margin-left:0}#doc.uh3-p #yucsHead #yucs-top-home{margin-top:2px !important}#yucs .yucs-noscript .yucs-no_menu .yucs-signout:link{left:30px;top:10px;position:absolute;*left:0}#yucsHead{background-color:#fafafc}#yucs #yucs-profile_inner.yucs-nv3 .yucs-profile-items-panel li a{white-space:normal}\u003c/style\u003e  \u003cdiv id=\"yucsHead\" class=\"yucs-srp yucs-en-us  yucs-standard\"\u003e\u003c!-- meta --\u003e\u003cdiv id=\"yucs-meta\" data-authstate=\"middleauth\" data-cobrand=\"standard\" data-crumb=\"gf78hrCS4i9\" data-gta=\"2IJmO1kVuJp\" data-device=\"desktop\" data-experience=\"uh3\" data-firstname=\"Daniel\" data-flight=\"1407848981\" data-forcecobrand=\"standard\" data-guid=\"QQVB2UEL2CNLWPR6SGC7RU356M\" data-host=\"games.search.yahoo.com\" data-https=\"0\" data-languagetag=\"en-us\" data-property=\"srp\" data-protocol=\"http\" data-shortfirstname=\"Daniel\" data-shortuserid=\"danieltester783\" data-status=\"active\" data-spaceid=\"2145829076\" data-test_id=\"\" data-userid=\"danieltester783\" \u003e\u003c/div\u003e\u003c!-- /meta --\u003e\u003cdiv id=\"yucs-comet\" style=\"display:none;\"\u003e\u003c/div\u003e\u003cdiv id=\"yucs-disclaimer\" class=\"yucs-disclaimer yucs-activate yucs-hide yucs-property-srp yucs-fcb- \" data-disclaimertext=\"Do Not Track is no longer enabled on Yahoo. Your experience is now personalized. {disclaimerLink}More info{linkEnd}\" data-ylt-link=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkABdPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2finfo.yahoo.com%2fprivacy%2fus%2fyahoo%2f/RK=0/RS=BIgcHYTQr.jaeQoLzxxErvcZp2w-\" data-ylt-disclaimerbarclose=\"/;_ylt=AwrBEiIUEupTSgkABtPUwOZ_\" data-ylt-disclaimerbaropen=\"/;_ylt=AwrBEiIUEupTSgkAB9PUwOZ_\" data-linktarget=\"_top\" data-lang=\"en-us\" data-property=\"srp\" data-device=\"Desktop\" data-close-txt=\"Close this window\"\u003e\u003c/div\u003e\u003cstyle\u003e#doc.uh3lite, .uh3lite #yucsHead, #yucsHead, #doc.uh3lite #hd {\n                        margin-top: 0!important;\n                        }\u003c/style\u003e\u003cdiv id=\"yucs-top-bar\" class='yucs-ps'\u003e \u003cdiv id='yucs-top-inner'\u003e \u003cul id='yucs-top-list'\u003e \u003cli id='yucs-top-home'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkACNPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.yahoo.com%2f/RK=0/RS=A.c.KWFJ.4cFyJZIWChjmgqP.kA-\"\u003e\u003cspan class=\"sp yucs-top-ico\"\u003e\u003c/span\u003eHome\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-mail'\u003e\u003ca href=\"https://mail.yahoo.com/;_ylt=AwrBEiIUEupTSgkACdPUwOZ_?.intl=us\u0026.lang=en-US\u0026.src=ym\"\u003eMail\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-news'\u003e\u003ca href=\"http://news.yahoo.com/;_ylt=AwrBEiIUEupTSgkACtPUwOZ_\"\u003eNews\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-sports'\u003e\u003ca href=\"http://sports.yahoo.com/;_ylt=AwrBEiIUEupTSgkAC9PUwOZ_\"\u003eSports\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-finance'\u003e\u003ca href=\"http://finance.yahoo.com/;_ylt=AwrBEiIUEupTSgkADNPUwOZ_\"\u003eFinance\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-weather'\u003e\u003ca href=\"https://weather.yahoo.com/;_ylt=AwrBEiIUEupTSgkADdPUwOZ_\"\u003eWeather\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-games'\u003e\u003ca href=\"https://games.yahoo.com/;_ylt=AwrBEiIUEupTSgkADtPUwOZ_\"\u003eGames\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-groups'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAD9PUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fgroups.yahoo.com%2f/RK=0/RS=mrz6wt3cHVSrQqRJbJYxbPbu4vc-\"\u003eGroups\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-answers'\u003e\u003ca href=\"https://answers.yahoo.com/;_ylt=AwrBEiIUEupTSgkAENPUwOZ_\"\u003eAnswers\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-screen'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAEdPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fscreen.yahoo.com%2f/RK=0/RS=PZ5JXn7iV3M44Ug_yTxB9SjANUM-\"\u003eScreen\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-flickr'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAEtPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.flickr.com%2f/RK=0/RS=cgZbs1GuwlJSlu9l6sdZ.nOefYM-\"\u003eFlickr\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-mobile'\u003e\u003ca href=\"https://mobile.yahoo.com/;_ylt=AwrBEiIUEupTSgkAE9PUwOZ_\" data-ylk=\"t5:mobile;slk:mobile;\"\u003eMobile\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-more' class='yucs-menu yucs-more-activate' data-ylt=\"/;_ylt=AwrBEiIUEupTSgkAFNPUwOZ_\"\u003e\u003ca href=\"#\" id='yucs-more-link' class='yucs-leavable'\u003eMore\u003cspan class=\"sp yucs-top-ico\"\u003e\u003c/span\u003e\u003c/a\u003e \u003cdiv id='yucs-top-menu'\u003e \u003cdiv class='yui3-menu-content'\u003e \u003cul class='yucs-hide yucs-leavable'\u003e \u003cli id='yucs-top-celebrity'\u003e\u003ca href=\"https://celebrity.yahoo.com/;_ylt=AwrBEiIUEupTSgkAFdPUwOZ_\"\u003eCelebrity\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-movies'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAFtPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.yahoo.com%2fmovies/RK=0/RS=aeL231YcXRPUqmFQc1CPJWaHld4-\"\u003eMovies\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-music'\u003e\u003ca href=\"https://music.yahoo.com/;_ylt=AwrBEiIUEupTSgkAF9PUwOZ_\"\u003eMusic\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-tv'\u003e\u003ca href=\"https://tv.yahoo.com/;_ylt=AwrBEiIUEupTSgkAGNPUwOZ_\"\u003eTV\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-health'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAGdPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.yahoo.com%2fhealth/RK=0/RS=Za.L6ki1jP8q601ay6nx.yswhj8-\"\u003eHealth\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-beauty'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAGtPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.yahoo.com%2fbeauty/RK=0/RS=bLsGRbfAI0b_4r_kIj7rysh2dcE-\"\u003eBeauty\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-food'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAG9PUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.yahoo.com%2ffood/RK=0/RS=SYIvi35Z7j1v5drus_0wzQkRdPE-\"\u003eFood\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-tech'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAHNPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.yahoo.com%2ftech/RK=0/RS=Dq.w0HU.7aqMhGbNmr.4y60O0ck-\"\u003eTech\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-shopping'\u003e\u003ca href=\"http://shopping.yahoo.com/;_ylt=AwrBEiIUEupTSgkAHdPUwOZ_\"\u003eShopping\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-travel'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAHtPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.yahoo.com%2ftravel/RK=0/RS=yCcBA5Kc9oZXU_dQC0J6tejCx4U-\"\u003eTravel\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-autos'\u003e\u003ca href=\"https://autos.yahoo.com/;_ylt=AwrBEiIUEupTSgkAH9PUwOZ_\"\u003eAutos\u003c/a\u003e\u003c/li\u003e \u003cli id='yucs-top-homes'\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAINPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fhomes.yahoo.com%2f/RK=0/RS=xQFAVQUuUyBQzBWU9K5txzw6zFk-\"\u003eHomes\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003c/div\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"yucs\" class=\"yucs yucs-mc  yog-grid\" data-lang=\"en-us\" data-property=\"srp\" data-flight=\"1407848981\" data-linktarget=\"_top\" data-uhvc=\"/;_ylt=AwrBEiIUEupTSgkAIdPUwOZ_\"\u003e \u003cdiv class=\"yucs-fl-left yog-cp\"\u003e     \u003c/div\u003e\u003cdiv class=\"yucs-fl-right\"\u003e \u003cdiv id=\"yucs-profile\" class=\"yucs-activate yucs-profile yucs-menu_nav\"\u003e \u003ca id=\"yucs-menu_link_profile\" class=\"yucs-submenu-toggle yucs-um-activate\" href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAItPUwOZ_/RV=2/RE=1407877781/RO=10/RU=http%3a%2f%2fprofile.yahoo.com%2f/RK=0/RS=WDGpRtd_VXzOV9ox7ZFSNrPB_.k-\" target=\"_top\" rel=\"nofollow\" aria-label=\"Profile\"\u003e \u003cspan class=\"yucs-avatar yucs-av-activate yucs-menu_anchor\" data-user=\"Daniel\" data-prof=\"Avatar\" data-crumb=\"gf78hrCS4i9\" data-guid=\"QQVB2UEL2CNLWPR6SGC7RU356M\"\u003e\u003c/span\u003e\u003cspan id=\"yucs-profile_text\"\u003e\u003cspan class=\"yuhead-name-greeting yucs-fc\"\u003eHi,\u0026nbsp;\u003c/span\u003e\u003cspan class=\"yuhead-name yucs-fc\"\u003eDaniel\u003c/span\u003e\u003c/span\u003e \u003c/a\u003e \u003cnoscript class=\"yucs-noscript\"\u003e\u003cspan class=\"yucs-no_menu\"\u003e\u003ca class=\"yucs-signout\" href=\"https://login.yahoo.com/config/login;_ylt=AwrBEiIUEupTSgkAI9PUwOZ_?logout=1\u0026.direct=2\u0026amp;.src=\u0026amp;.intl=us\u0026amp;.lang=en-US\u0026.done=http://games.search.yahoo.com/search\" target=\"_top\" rel=\"nofollow\"\u003e Sign Out\u003c/a\u003e\u003c/span\u003e\u003c/noscript\u003e \u003cdiv id=\"yucs-profile_inner\" class=\"yucs-hide yucs-menu\" data-ylt-profile=\"/;_ylt=AwrBEiIUEupTSgkAJNPUwOZ_\" data-yltmenushown=\"/;_ylt=AwrBEiIUEupTSgkAJdPUwOZ_\"\u003e \u003cspan class=\"sp yucs-dock\"\u003e\u003c/span\u003e \u003cul class=\"yucs-profile-items-panel\" role=\"menu\"\u003e \u003cli\u003e\u003cdiv class=\"yucs-signed_in_as\"\u003eSigned in as:\u003cbr /\u003e\u003cspan class=\"yuhead-yid ellipses\"\u003edanieltester783\u003c/span\u003e\u003c/div\u003e\u003c/li\u003e \u003cspan id=\"yucs-my-saves-sep\" class=\"yucs-separator\" role=\"presentation\"\u003e\u003c/span\u003e\u003cli\u003e \u003cdiv class=\"yucs-my-saves\"\u003e \u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAJtPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.yahoo.com%2fmysaves/RK=0/RS=ZHJIs.nY6_c5cS2Pt34xthILr_8-\" target=\"_top\"\u003e My Saves \u003c/a\u003e \u003c/div\u003e\u003c/li\u003e \u003cspan class=\"yucs-separator\" role=\"presentation\"\u003e\u003c/span\u003e \u003cli\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAJ9PUwOZ_/RV=2/RE=1407877781/RO=10/RU=http%3a%2f%2fprofile.yahoo.com%2f/RK=0/RS=WDGpRtd_VXzOV9ox7ZFSNrPB_.k-\" target=\"_top\"\u003eProfile\u003c/a\u003e\u003c/li\u003e  \u003cspan class=\"yucs-separator\" role=\"presentation\"\u003e\u003c/span\u003e \u003cli\u003e\u003ca class=\"yucs-signout\" href=\"https://login.yahoo.com/config/login;_ylt=AwrBEiIUEupTSgkAKNPUwOZ_?logout=1\u0026.direct=2\u0026amp;.src=\u0026amp;.intl=us\u0026amp;.lang=en-US\u0026.done=http://games.search.yahoo.com/search\" target=\"_top\" rel=\"nofollow\"\u003e Sign Out\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e\u003c/div\u003e \u003cdiv class=\"yucs-mail_link yucs-mailpreview-ancestor\"\u003e\u003ca id=\"yucs-mail_link_id\" class=\"sp yltasis yucs-fc\" href=\"https://mail.yahoo.com/;_ylt=AwrBEiIUEupTSgkAKdPUwOZ_?.intl=us\u0026.lang=en-US\u0026.src=ym\" rel=\"nofollow\" target=\"_top\"\u003e Mail \u003cspan class=\"yucs-activate yucs-mail-count yucs-hide yucs-alert-count-con\" data-uri-scheme=\"https\" data-uri-path=\"mg.mail.yahoo.com/mailservices/v1/newmailcount\" data-authstate=\"middleauth\" data-crumb=\"gf78hrCS4i9\" data-mc-crumb=\"fIU6OqsvTBs\"\u003e\u003cspan class=\"yucs-alert-count\"\u003e\u003c/span\u003e\u003c/span\u003e\u003c/a\u003e\u003cdiv class=\"yucs-mail-preview-panel yucs-menu yucs-hide\" data-mail-txt=\"Mail\" data-uri-scheme=\"http\" data-uri-path=\"ucs.query.yahoo.com/v1/console/yql\" data-mail-view=\"Go to Mail\" data-mail-help-txt=\"Help\" data-mail-help-url=\"http://help.yahoo.com/l/us/yahoo/mail/ymail/\" data-mail-loading-txt=\"Loading...\" data-languagetag=\"en-us\" data-mrd-crumb=\"h4iEmhU1ceh\" data-authstate=\"middleauth\" data-middleauth-signin-text=\"Click here to view your mail\" data-popup-login-url=\"https://login.yahoo.com/config/login_verify2?.pd=c%3DOIVaOGq62e5hAP8Tv..nr5E3\u0026.src=sc\" data-middleauthtext=\"You have {count} new messages.\" data-yltmessage-link=\"http://mrd.mail.yahoo.com/msg;_ylt=AwrBEiIUEupTSgkAKtPUwOZ_?mid={msgID}\u0026fid=Inbox\u0026src=uh\u0026.crumb=h4iEmhU1ceh\" data-yltviewall-link=\"https://mail.yahoo.com/;_ylt=AwrBEiIUEupTSgkAK9PUwOZ_\" data-yltpanelshown=\"/;_ylt=AwrBEiIUEupTSgkALNPUwOZ_\" data-ylterror=\"/;_ylt=AwrBEiIUEupTSgkALdPUwOZ_\" data-ylttimeout=\"/;_ylt=AwrBEiIUEupTSgkALtPUwOZ_\" data-generic-error=\"We're unable to preview your mail.\u003cbr\u003eGo to Mail.\" data-nosubject=\"[No Subject]\" data-timestamp='short'\u003e\u003c/div\u003e\u003c/div\u003e \u003cdiv id=\"yucs-help\" class=\"yucs-activate yucs-help yucs-menu_nav\"\u003e \u003ca id=\"yucs-help_button\" class=\"sp yltasis\" href=\"javascript:void(0);\" aria-label=\"Help\" rel=\"nofollow\"\u003e \u003cem class=\"yucs-hide yucs-menu_anchor\"\u003eHelp\u003c/em\u003e \u003c/a\u003e \u003cdiv id=\"yucs-help_inner\" class=\"yucs-hide yucs-menu yucs-hm-activate\" data-yltmenushown=\"/;_ylt=AwrBEiIUEupTSgkAL9PUwOZ_\"\u003e \u003cspan class=\"sp yucs-dock\"\u003e\u003c/span\u003e \u003cdiv class=\"yucs-yql_loading\"\u003e \u003cul id=\"yuhead-help-panel\"\u003e \u003cli\u003e\u003ca class=\"yucs-acct-link\" href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAMNPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fedit.yahoo.com%2fmc2.0%2feval_profile%3f.intl%3dus%26.lang%3den-US%26.done%3dhttp%3a%2f%2fgames.search.yahoo.com%2fsearch%26amp%3b.src%3d%26amp%3b.intl%3dus%26amp%3b.lang%3den-US/RK=0/RS=.ehfC6OF3eRmr4LyD4k3AOUuC_8-\" target=\"_top\"\u003eAccount Info\u003c/a\u003e\u003c/li\u003e  \u003c/ul\u003e \u003c/div\u003e \u003c/div\u003e\u003c/div\u003e \u003cdiv id=\"yucs-network_link\"\u003e\u003ca id=\"yucs-home_link\" href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAMdPUwOZ_/RV=2/RE=1407877781/RO=10/RU=https%3a%2f%2fwww.yahoo.com%2f/RK=0/RS=A.c.KWFJ.4cFyJZIWChjmgqP.kA-\" rel=\"nofollow\" target=\"_top\"\u003e\u003cem class=\"sp\"\u003eYahoo\u003c/em\u003e\u003cspan class=\"yucs-fc\"\u003eHome\u003c/span\u003e\u003c/a\u003e\u003c/div\u003e  \u003cdiv id=\"yucs-bnews\" class=\"yucs-activate slide yucs-hide\" data-linktarget=\"_top\" data-authstate=\"middleauth\" data-deflink=\"http://news.yahoo.com\" data-deflinktext=\"Visit Yahoo News for the latest.\" data-title=\"Breaking News\" data-close=\"Close this window\" data-lang=\"en-us\" data-property=\"srp\"\u003e\u003c/div\u003e      \u003c/div\u003e   \u003c/div\u003e \u003c!-- contextual_shortcuts --\u003e\u003c!-- /contextual_shortcuts --\u003e\u003c!-- property: srp | languagetag: en-us | status: active | spaceid: 2145829076 | cobrand: standard | markup: empty --\u003e\u003c!-- alert --\u003e\u003c!-- /alert --\u003e\u003cdiv id=\"yUnivHead\" class=\"yucs-hide\"\u003e\u003c!-- empty --\u003e\u003c/div\u003e\u003c/div\u003e\u003cspan id=\"bb-desc\" title=\"\"\u003e\u003c/span\u003e \u003ca href=\"http://games.search.yahoo.com/search?p=alert%28142%29%3B%28\u0026fr=sfpalert%28142%29%3B%28\u0026fr2=alert%28142%29%3B%28\u0026noqt=1\" id=\"bb-hide\" title=\"Click here to hide this bar\"\u003e[hide]\u003c/a\u003e\u003c/div\u003e\u003cdiv id=\"hd\"\u003e\u003ca id=\"logo\" href=\"http://games.yahoo.com/;_ylt=AwrBEiIUEupTSgkAMtPUwOZ_\"\u003eYahoo!\u003c/a\u003e\u003cdiv class=\"sbx\"\u003e\u003cform method=\"get\" name=\"s\" id=\"sf\" role=\"search\" action=\"http://games.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAM9PUwOZ_\"accept-charset=\"utf-8\"\u003e\u003clabel for=\"yschsp\" class=\"off-left\"\u003eSearch query\u003c/label\u003e\u003cdiv id=\"sbq-wrap\" class=\"sbq-w\"\u003e\u003cinput type=\"text\" class=\"sbq\" id=\"yschsp\" name=\"p\" value=\"v8uzu =\" autocomplete=\"off\" tabindex=\"1\"\u003e\u003c/div\u003e\u003cbutton id=\"sbq-clear\" type=\"button\" class=\"sbq-x\"\u003e\u003cspan class=\"sprite\"\u003e\u003c/span\u003e\u003c/button\u003e\u003cinput type=\"submit\" class=\"sbb\" value=\"Search\" tabindex=\"2\"\u003e\u003cinput type=\"hidden\" name=\"fr2\" value=\"sb-top\"\u003e\u003cinput type=\"hidden\" name=\"fr\" value=\"sfpv8uzu =\"\u003e\u003c/form\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"bd\" role=\"document\"\u003e\u003cdiv id=\"sidebar\"\u003e\u003cdiv class=\"bd\"\u003e\u003cul id=\"vertical_pivot_tabs\"\u003e\u003cli class=\"pivot piv-000 default_show\"\u003e\u003ca href=\"http://search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkANNPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eWeb\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-030 default_show\"\u003e\u003cspan class=\"active\"\u003eGames\u003c/span\u003e\u003c/li\u003e\u003cli class=\"pivot piv-001 default_hide\"\u003e\u003ca href=\"http://images.search.yahoo.com/search/images;_ylt=AwrBEiIUEupTSgkANdPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eImages\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-002 default_hide\"\u003e\u003ca href=\"http://video.search.yahoo.com/search/video;_ylt=AwrBEiIUEupTSgkANtPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eVideo\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-003 default_hide\"\u003e\u003ca href=\"http://news.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAN9PUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eNews\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-006 default_hide\"\u003e\u003ca href=\"http://search.yahoo.com/local/s;_ylt=AwrBEiIUEupTSgkAONPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eLocal\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-007 default_hide\"\u003e\u003ca href=\"http://shopping.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAOdPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eShopping\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-026 default_hide\"\u003e\u003ca href=\"http://maps.yahoo.com/search/maps;_ylt=AwrBEiIUEupTSgkAOtPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eMaps\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-031 default_hide\"\u003e\u003ca href=\"http://autos.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAO9PUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eAutos\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-016 default_hide\"\u003e\u003ca href=\"http://recipes.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAPNPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eRecipes\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-004 default_hide\"\u003e\u003ca href=\"http://sports.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAPdPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eSports\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-005 default_hide\"\u003e\u003ca href=\"http://finance.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAPtPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eFinance\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-010 default_hide\"\u003e\u003ca href=\"http://movies.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAP9PUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eMovies\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-017 default_hide\"\u003e\u003ca href=\"http://celebrity.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAQNPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eCelebrity\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-021 default_hide\"\u003e\u003ca href=\"http://dictionary.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAQdPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eDictionary\u003c/a\u003e\u003c/li\u003e\u003cli class=\"pivot piv-012 default_hide\"\u003e\u003ca href=\"http://dir.search.yahoo.com/search;_ylt=AwrBEiIUEupTSgkAQtPUwOZ_?\u0026p=alert%28142%29%3B%28\u0026fr2=piv-games\u0026fr=sfpalert%28142%29%3B%28\"\u003eDirectory\u003c/a\u003e\u003c/li\u003e\u003cli class=\"toggle more last on\"\u003e\u003ca href=\"#\"\u003eMore\u003c/a\u003e\u003c/li\u003e\u003cli class=\"toggle less last\"\u003e\u003ca href=\"#\"\u003eLess\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv id=\"results\"\u003e\u003cstyle type=\"text/css\"\u003e.sc cite{color:#ABAEB7;font-size:85%}.sc .sc-url{color:#1E7D83;font-weight:bold}.sc .timestamp{color:#ABAEB7}.sc .sc-url a{color:#8284cc}.sc .sc-links li{display:inline;padding:0 8px;line-height:1.5em}.sc .sc-links .fst{border-left:none;padding-left:0}.sc .sc-ft{clear:both}.zrp,.zrpmsg{font-size:16px;color:#5f5f5f;padding:0;margin-left:10px;margin-right:10px}.zrpmsg strong{color:#3f3f3f}.zrpmsg{line-height:20px;word-wrap:break-word;margin-bottom:27px}.zrp{padding-bottom:20px}.zrp.help{border:1px solid #ccc;border-left:0;border-right:0;margin:1em 11px;padding:5px;text-align:center}.zrp ul{margin-top:10px;padding-left:38px}.zrp li{font-size:13px;line-height:17px;list-style-type:disc}.dym{padding-left:0}.dym i{font-style:italic;font-weight:bold}\u003c/style\u003e\u003cdiv id=\"cols\"\u003e\u003cdiv id=\"left\"\u003e\u003cdiv id=\"main\"\u003e\u003cp class=\"msg zrpmsg\"\u003eWe did not find results for: \u003cstrong\u003ev8uzu =\u003c/strong\u003e. Try the suggestions below or type a new query above.\u003c/p\u003e\u003cdiv class=\"zrp\"\u003e\u003cp\u003eSuggestions:\u003c/p\u003e\u003cul\u003e\u003cli\u003eCheck your spelling.\u003c/li\u003e\u003cli\u003eTry more general words.\u003c/li\u003e\u003cli\u003eTry different words that mean the same thing.\u003c/li\u003e\u003cli id=\"ans_tip\"\u003eTry asking a question on \u003ca href=\"http://answers.yahoo.com/;_ylt=AwrBEiIUEupTSgkAQ9PUwOZ_\"\u003eYahoo Answers\u003c/a\u003e\u003c/li\u003e\u003cli id=\"hlp_tip\"\u003eFor helpful tips on searching, visit the \u003ca href=\"http://help.yahoo.com/l/us/yahoo/search/basics/;_ylt=AwrBEiIUEupTSgkARNPUwOZ_\"\u003eYahoo Search Help Center\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"bdc\"\u003e\u003cdiv id=\"ft\" role=\"contentinfo\"\u003e\u003cul\u003e\u003cli class=\"copyright\"\u003eYahoo\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://help.yahoo.com/l/us/yahoo/search/;_ylt=AwrBEiIUEupTSgkARdPUwOZ_\"\u003eHelp\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkARtPUwOZ_/RV=2/RE=1407877781/RO=10/RU=http%3a%2f%2finfo.yahoo.com%2fprivacy%2fus%2fyahoo%2fsearch%2fdetails.html/RK=0/RS=gXeeMdTeBWHRl0gE6TJiHxsU_sU-\"\u003ePrivacy\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkAR9PUwOZ_/RV=2/RE=1407877781/RO=10/RU=http%3a%2f%2finfo.yahoo.com%2flegal%2fus%2fyahoo%2futos%2futos-173.html/RK=0/RS=Ij1c6iyYu5xVFW9lV1JJfnh_m.4-\"\u003eTerms\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://ri.search.yahoo.com/_ylt=AwrBEiIUEupTSgkASNPUwOZ_/RV=2/RE=1407877781/RO=10/RU=http%3a%2f%2fadvertising.yahoo.com%2farticle%2fsearch-advertising.html/RK=0/RS=zjWOrHwkS9hNxaz2sl5Uh7NVIjU-\"\u003eAdvertise\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c!-- SpaceID=2145829076 loc=FOOT9 noad --\u003e\u003c!-- fac-gd2-noad --\u003e\u003c!-- gd2-status-2 --\u003e\u003c!--QYZ CMS_NONE_AVAIL,,98.139.227.124;;FOOT9;2145829076;2;--\u003e\u003cscript\u003eYUI_config={\"spaceid\":\"2145829076\",\"pvid\":\"qgzECjk4LjGYwWQxU4R22Ad7OTguMVPqEhT_wuo4\",\"beacon\":\"http:\\/\\/games.search.yahoo.com\\/beacon\\/p.gif\",\"testid\":\"\",\"fetchCSS\":true};(function(){var e=window.location,d,b;function c(f){return decodeURIComponent(f.replace(/\\+/g,\" \"))}function a(j){var h=j.match(/([^\\?#\u0026]+)=([^#\u0026]*)/g)||[],l={},g,f,k;for(g=0,f=h.length;g\u003cf;++g){k=h[g].split(\"=\");l[c(k[0])]=c(k[1])}return l}if(window.navigator\u0026\u0026window.navigator.userAgent.match(/Gecko\\//)){d=/#.*$/.exec(e.href);d=d\u0026\u0026d[0]?d[0]:\"\"}else{d=e.hash}b=a(d);if(b.sd){document.getElementById(\"yschsp\").value=b.sd}else{if(b._sd){document.getElementById(\"yschsp\").value=\"\"}}})();(function(){YUI={Env:{mods:{},add:function(n,m,l,d){if(n\u0026\u0026n.addEventListener){n.addEventListener(m,l,d)}else{if(n\u0026\u0026n.attachEvent){n.attachEvent(\"on\"+m,l)}}},remove:function(o,n,m,d){if(o\u0026\u0026o.removeEventListener){try{o.removeEventListener(n,m,d)}catch(l){}}else{if(o\u0026\u0026o.detachEvent){o.detachEvent(\"on\"+n,m)}}}},add:function(l,n,d,m){YUI.Env.mods[l]={name:l,fn:n,version:d,details:m||{}}}};Y={_pending:[],use:function(){Y._pending.push(arguments)},Search:{}};var i=window,g=document,k=YUI.Env.add,f=YUI.Env.remove,b=(function(){var d=[];function l(){setTimeout(function(){var n=0,m=d.length;for(;n\u003cm;n++){d[n]()}f(i,\"load\",l)},0)}k(i,\"load\",l);return{add:function(m){d.push(m)}}}()),a=(function(){var d=navigator.userAgent.match(/MSIE\\s([^;]*)/);if(d){return parseFloat(d[1])}return 0}());function c(d){return d.replace(/^\\s+|\\s+$/g,\"\")}function e(m,d){var l=new RegExp(\"(\\\\s|^)\"+d+\"(\\\\s|$)\");return m.className.match(l)}function j(m,d){var l=new RegExp(\"(\\\\s|^)\"+d+\"(\\\\s|$)\");m.className=c(m.className.replace(l,\" \"))}function h(l){var d=g.getElementById(l);if(d){d.reset()}}Y.Search.Loader=(function(){var l=[],m=false;function o(q,p){var s=g.createElement(q),r,t;for(r in p){if(p.hasOwnProperty(r)){t=p[r];s.setAttribute(r,t)}}return s}function d(){var r=0,p=l.length,s,t,q=g.getElementsByTagName(\"head\")[0];for(;r\u003cp;r++){s=l[r];if(s.type===\"css\"){t=o(\"link\",{href:s.url,rel:\"stylesheet\",type:\"text/css\"})}else{if(s.type===\"js\"){t=o(\"script\",{src:s.url})}else{continue}}q.appendChild(t)}m=true;l=[]}function n(){var r=arguments[0],s=Array.prototype.slice.call(arguments,1),q=0,p=s.length;for(;q\u003cp;q++){l.push({type:r,url:s[q]})}if(m){d()}}b.add(d);return{js:function(){var p=Array.prototype.slice.call(arguments);n.apply(null,[\"js\"].concat(p))},css:function(){var p=Array.prototype.slice.call(arguments);n.apply(null,[\"css\"].concat(p))}}}());(function(){var o=0;function n(){if(--o===0\u0026\u0026typeof rt_AddTime===\"function\"){rt_AddTime(\"t2\")}if(o===0\u0026\u0026typeof T!==\"undefined\"){T.stamp(\"img\")}}function l(){var q=this,p=q.parentNode.parentNode,y,t,r,z,v,u,s;n();if(q.getAttribute(\"allowResize\")===\"true\"||e(q,\"sm-thumb\")){j(p,\"sm-hide\");if(a\u0026\u0026e(p,\"sm-media\")){y=p.offsetWidth;t=p.offsetHeight;r=q.width;z=q.height;v=Math.max(r/y,z/t);if(v\u0026\u0026r\u0026\u0026z){q.style.width=(r/v)+\"px\";q.style.height=(z/v)+\"px\"}}}if(e(q,\"has-default\")){u=q.parentNode.childNodes;for(var s=0;s\u003cu.length;s++){if(e(u[s],\"default-thumb\")){u[s].style.display=\"none\";break}}q.style.display=\"block\"}}function m(){var p=this.parentNode.parentNode,q;n();this.style.display=\"none\";if(e(p,\"imagedd-item\")){q=p.parentNode;q.removeChild(p)}else{if(e(p,\"ugc-thumb\")){var r=p.parentNode;if(r\u0026\u0026r.parentNode\u0026\u0026e(r.parentNode,\"thumb\")){r.parentNode.className=\"res\";r.removeChild(p)}}}}function d(){var p=g.images,q,r,s;for(q=0;q\u003cp.length;q++){r=p[q];s=r.getAttribute(\"data-src\")||r.getAttribute(\"__src\")||r.getAttribute(\"_src\");if(s){o++;r.onload=l;r.onerror=m;r.setAttribute(\"src\",s);r.removeAttribute(\"data-src\");r.removeAttribute(\"__src\");r.removeAttribute(\"_src\");j(r,\"hidden\")}}}b.add(d)}());b.add(function(){var l=g.getElementById(\"yschsp\"),d=/(^|\\s)sd(\\s|$)/;if(l\u0026\u0026d.test(l.parentNode.className)){return}if(a\u0026\u0026(!l||!l.getAttribute(\"dirty\"))){h(\"sf\");h(\"sB\")}});(function(){var l=g.getElementById(\"web\"),m=(l)?l.getElementsByTagName(\"a\"):[],p=/(?:^|\\s+)yschttl(?:\\s+|$)/,n=m.length,q,d=(function(){if(a\u0026\u0026a\u003c7){return function(v,t){var u=new RegExp(\"^\u003ca.*\\\\s\"+t+'=\"([^\"]*)\"',\"i\"),s=u.exec(v.outerHTML);return s?s[1]:null}}else{return function(t,s){return t.getAttribute(s)}}}());function r(s){var w=s||i.event,u=w.target||w.srcElement,v;while(u){if(u.tagName\u0026\u0026u.tagName.toLowerCase()===\"a\"\u0026\u0026u.getAttribute(\"dirtyhref\")){v=d(u,\"dirtyhref\");if(v){u.setAttribute(\"href\",v)}break}u=u.parentNode}}k(g,\"mousedown\",r);k(g,\"click\",r);function o(w){var t,x,s,v,u;t=d(w,\"href\");if(!t){return}x=d(w,\"ourl\");if(!x){s=t.indexOf(\"/**\");if(s\u003c0){return}x=decodeURIComponent(t.substr(s+3))}v=w.cloneNode(true);v.setAttribute(\"href\",x);v.setAttribute(\"dirtyhref\",t);if(a){u=v.innerHTML;t=d(v,\"dirtyhref\");v.setAttribute(\"href\",t);if(v.innerHTML!==u){return}v.setAttribute(\"href\",x)}w.parentNode.replaceChild(v,w)}while(n--){q=m[n];if(p.test(q.className)){o(q)}}}())}());YUI.add(\"init-zrp\", function(Y) {Y.namespace(\"Vertical.Zrp\");Y.Vertical.Zrp.init = function() {return {isZrp: true} }});YUI.add(\"vertical-zrp\",function(a){a.namespace(\"Vertical.Zrp\");a.Vertical.Zrp.postProcessing=function(d){var b=document.getElementById(\"sbx-bot\"),c=document.getElementById(\"results\");if(b){b.style.visibility=d.isZrp?\"hidden\":\"visible\"}}},\"3.3.0\",{requires:[\"init-zrp\"]});Y.use(\"vertical-zrp\",function(b){if(b.Vertical.Zrp.init){var a=b.Vertical.Zrp.init();if(a){b.Vertical.Zrp.postProcessing(a)}}});Y.use(\"srp\",function(){Y.Search.SRP.init({\"enable_sidebar_collapse\":\"\",\"pvid\":\"qgzECjk4LjGYwWQxU4R22Ad7OTguMVPqEhT_wuo4\",\"url_img_progress\":\"http:\\/\\/l.yimg.com\\/pv\\/i\\/us\\/sch\\/gr4\\/sp-progress2.gif\",\"tts\":null},{\"aria_loading_results\":\"Retrieving search results. Please wait.\",\"aria_results_loaded\":\"New search results have been retrieved. Press control shift and down arrow key to jump to the first search result. Press control shift and up arrow key to jump back to the search box.\",\"common.expando.playvideo\":\"Play Video\",\"common.expando.closevideo\":\"Close Video\",\"common.results.error\":\"Sorry, there was a problem retrieving search results. Please try again.\",\"common.results.loading\":\"Loading results...\",\"srp.title\":\"%q - Yahoo Games Search Results\",\"common.more\":\"More\",\"common.less\":\"Less\"});});Y.use(\"search-assist-client\", function() {new Y.SEARCHASSIST.CLIENT({\"property\":\"games\",\"searchBox\":\"#yschsp\",\"hostNodeToAttach\":\"#sbq-wrap\",\"maxSuggests\":10,\"anyKeySearch\":true,\"backspaceBehaviorNative\":true,\"enableTrending\":false,\"autoAlign\":false,\"cancelButton\":true,\"tcpPreConnect\":false,\"quietMode\":false,\"ariaPlug\":true,\"stream\":false,\"reverseHighlight\":true,\"lang\":\"en-US\",\"device\":{\"tablet\":{\"skin\":\"desktop\"}},\"ult\":{\"spaceId\":\"2145829076\",\"csrcpvid\":\"qgzECjk4LjGYwWQxU4R22Ad7OTguMVPqEhT_wuo4\",\"vtestid\":\"\"},\"extraUltParams\":{\"fr\":\"sfpv8uzu =\",\"n_rslt\":0},\"yltCustom\":\"_ylt=AwrBEiIUEupTSgkABNPUwOZ_\"});});Y.use('loader','srp',function(){Y.config=Y.mix(Y.config,{bootstrap:true,combine:true,comboBase:'http://l.yimg.com/zz/combo?',ignore:['skin-sam-tabview','gallery-jsonp'],root:'yui:3.10.0/build/',groups:{a:{combine:true,comboBase:'http://l.yimg.com/zz/combo?',ext:false,root:'pv/',modules:{\"srp-universal-header-3\":{\"path\":\"lib\\/s8\\/vertical\\/srp-universal-header-3_201305050738.js\",\"requires\":[]}}}}},true,null,0,true);Y.Search.use('srp-universal-header-3','node-focusmanager','base','io','json','async-queue','cookie','event-custom','jsonp','jsonp-url','event','substitute','event-resize','event-hover','event-mouseenter','event-delegate','querystring-stringify','oop','classnamemanager','lang/datatype-date','intl',function(){(function(){Y.Search.UniversalHeader.init({\"js\":\"http:\\/\\/l.yimg.com\\/zz\\/combo?kx\\/yucs\\/uh3\\/uh\\/1067\\/js\\/uh-min.js\\u0026kx\\/yucs\\/uh3\\/uh\\/js\\/102\\/gallery-jsonp-min.js\\u0026kx\\/yucs\\/uh3\\/uh\\/js\\/1021\\/menu_utils_v3-min.js\\u0026kx\\/yucs\\/uh3\\/uh\\/js\\/834\\/localeDateFormat-min.js\\u0026kx\\/yucs\\/uh3\\/uh\\/js\\/872\\/timestamp_library_v2-min.js\\u0026kx\\/yucs\\/uh3\\/uh\\/js\\/829\\/logo_debug-min.js\\u0026kx\\/yucs\\/uh_3_0_2\\/switch_theme\\/4\\/js\\/switch_theme-min.js\\u0026kx\\/yucs\\/uhc\\/meta\\/16\\/js\\/meta-min.js\\u0026kx\\/yucs\\/uh_common\\/beacon\\/18\\/js\\/beacon-min.js\\u0026kx\\/ucs\\/comet\\/js\\/77\\/cometd-yui3-min.js\\u0026kx\\/ucs\\/comet\\/js\\/77\\/conn-min.js\\u0026kx\\/ucs\\/comet\\/js\\/77\\/dark-test-min.js\\u0026kx\\/yucs\\/uh3\\/disclaimer\\/191\\/js\\/disclaimer_seed-min.js\\u0026kx\\/yucs\\/uh3\\/uh3_top_bar\\/js\\/274\\/top_bar_v3-min.js\\u0026kx\\/yucs\\/uh3\\/profile\\/js\\/62\\/profile-min.js\\u0026kx\\/yucs\\/uh3\\/profile\\/js\\/82\\/usermenu_v3-min.js\\u0026kx\\/ucs\\/common\\/js\\/135\\/jsonp-super-cached-min.js\\u0026kx\\/yucs\\/uh3\\/avatar\\/js\\/25\\/avatar-min.js\\u0026kx\\/yucs\\/uh3\\/mail_link\\/js\\/89\\/mailcount_ssl-min.js\\u0026kx\\/yucs\\/uh3\\/help\\/js\\/55\\/help_menu_v3-min.js\\u0026kx\\/ucs\\/common\\/js\\/131\\/jsonp-cached-min.js\\u0026kx\\/yucs\\/uh3\\/breakingnews\\/js\\/11\\/breaking_news-min.js\",\"sprite\":\"http:\\/\\/l.yimg.com\\/kx\\/yucs\\/uh3\\/uh\\/images\\/387\\/uh_sprite.png\",\"options\":[[{\"menuText\":\"Preferences\",\"actionType\":\"link\",\"url\":\"http:\\/\\/search.yahoo.com\\/preferences\\/preferences?pref_done=http%3A%2F%2Fgames.search.yahoo.com%2Fsearch%3Fei%3DUTF-8%26p%3Dalert%2528142%2529%253B%2528%26fr%3Dsfpalert%2528142%2529%253B%2528\\u0026.bcrumb=C4rlJwqEoeG\\u0026fr=sfpalert%28142%29%3B%28\",\"target\":\"_top\"}],[{\"menuText\":\"Advertising Programs\",\"actionType\":\"link\",\"url\":\"http:\\/\\/advertising.yahoo.com\\/\",\"target\":\"_top\"},{\"menuText\":\"About This Page\",\"actionType\":\"link\",\"url\":\"http:\\/\\/help.yahoo.com\\/l\\/us\\/yahoo\\/search\\/basics\\/basics-23.html\",\"target\":\"_top\"}]]});}());});});Y.Search.Loader.js('http://l.yimg.com/pv/lib/s8/vertical/us_srp_purple_games_1_201404292033.js','http://l.yimg.com/pv/lib/s8/vertical/us_srp_purple_games_2_201407092035.js','http://l.yimg.com/pv/lib/s8/vertical/srp_bucketbar_yui3_201202200327.js');\u003c/script\u003e\u003c/body\u003e\u003c/html\u003e\u003cscript\u003e(function(c){var e=\"https://\",a=c\u0026\u0026c.JSON,f=\"ypcdb\",g=document,d=[\"yahoo.com\",\"flickr.com\",\"rivals.com\",\"yahoo.net\",\"yimg.com\"],b;function i(l,o,n,m){var k,p;try{k=new Date();k.setTime(k.getTime()+m*1000);g.cookie=[l,\"=\",encodeURIComponent(o),\"; domain=\",n,\"; path=/; max-age=\",m,\"; expires=\",k.toUTCString()].join(\"\")}catch(p){}}function h(l){var k,m;try{k=new Image();k.onerror=k.onload=function(){k.onerror=k.onload=null;k=null};k.src=l}catch(m){}}function j(u,A,n,y){var w=0,v,z,x,s,t,p,m,r,l,o,k,q;try{b=location}catch(r){b=null}try{if(a){k=a.parse(y)}else{q=new Function(\"return \"+y);k=q()}}catch(r){k=null}try{v=b.hostname;z=b.protocol;if(z){z+=\"//\"}}catch(r){v=z=\"\"}if(!v){try{x=g.URL||b.href||\"\";s=x.match(/^((http[s]?)\\:[\\/]+)?([^:\\/\\s]+|[\\:\\dabcdef\\.]+)/i);if(s\u0026\u0026s[1]\u0026\u0026s[3]){z=s[1]||\"\";v=s[3]||\"\"}}catch(r){z=v=\"\"}}if(!v||!k||!z||!A){return}while(l=d[w++]){t=l.replace(/\\./g,\"\\\\.\");p=new RegExp(\"(\\\\.)+\"+t+\"$\");if(v==l||v.search(p)!=-1){o=l;break}}if(!o){return}if(z===e){A=n}w=0;while(m=A[w++]){h(z+m+k[m.substr(1+m.lastIndexOf(\"=\"))])}i(f,u,o,86400)}j('37fec0f993e7cac897a374c26ed69eee',['ad.yieldmanager.com/csync?ver=2.1','csync.yahooapis.com/csync?ver=2.1','u2sb.interclick.com/beacon.gif?ver=2.1'],['ad.yieldmanager.com/csync?ver=2.1','cdnk.interclick.com/beacon.gif?ver=2.1','csync.yahooapis.com/csync?ver=2.1'],'{\"2.1\":\"\u0026id=23351\u0026value=9uto4659b8gzb%26o%3d4%26q%3dp1DhmY1cLSBKWSYLyEPEqN30E6L-%26f%3de3%26v%3dIrQDW7cWZmKFOgkLxNgV\u0026optout=h%3d1%26b%3d0\u0026timeout=1407848981\u0026sig=13rgogtar\"}')})(window);\n                        \u003c/script\u003e\n                        \u003c!-- fe05.vertical.search.bf1.yahoo.com uncompressed/chunked Tue Aug 12 13:09:40 UTC 2014 --\u003e\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/onmouseover\", using HTTP method GET. The sent data was: \"in=qna0v%22qna0v\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/onmouseover",
            "httpTransactions": [
                {
                    "id": 165,
                    "url": "http://192.168.1.35:8082/xss/reflect/onmouseover?in=qna0v%22qna0v",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/onmouseover?in=qna0v%22qna0v HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["373"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:24 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eReflected XSS - attribute injection in tags (dq.2)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cH2\u003eUpdate Your Preferences\u003c/H2\u003e\u003cp\u003e\n                        \u003cFORM action=\"http://foobar.yahoo.com\"\u003e\n                        Homepage: \u003cinput value=\"qna0v\"qna0v\" name=\"hp\" size=\"40\"\u003e\u003cBR\u003e\n                        \u003cinput type=\"submit\" value=\"Change\"\u003e\u003c/FORM\u003e\n                        \u003cp\u003e\u003cA href=\"http://foobar.yahoo.com\"\u003eYour homepage\u003c/A\u003e\u003cBR\u003e\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/enc2_fp\", using HTTP method GET. The sent data was: \"in=nwfmn%2F%2A\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/enc2_fp",
            "httpTransactions": [
                {
                    "id": 148,
                    "url": "http://192.168.1.35:8082/xss/reflect/enc2_fp?in=nwfmn%2F%2A",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/enc2_fp?in=nwfmn%2F%2A HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["370"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:23 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eInjection in Javascript with both double quotes and backslash escaped with backslash - not exploitable (enc.2)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = \"nwfmn/*\";\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        Injection in Javascript with both double quotes and backslash escaped with backslash - not exploitable .\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js6_sq\", using HTTP method GET. The sent data was: \"in=b3ia0%27b3ia0\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js6_sq",
            "httpTransactions": [
                {
                    "id": 217,
                    "url": "http://192.168.1.35:8082/xss/reflect/js6_sq?in=b3ia0%27b3ia0",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js6_sq?in=b3ia0%27b3ia0 HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["411"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:25 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eJavaScript and single quote injection in JS block (js.6)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = {\n                        date: '',\n                        week: '1',\n                        bad: 'b3ia0'b3ia0',\n                        phase: '2',\n                        };\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates exploitable Injection due to unsafe handling of single quotes inside of a Javascript block.\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js3_notags_fp\", using HTTP method GET. The sent data was: \"in=wtdkl%20%3D\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js3_notags_fp",
            "httpTransactions": [
                {
                    "id": 307,
                    "url": "http://192.168.1.35:8082/xss/reflect/js3_notags_fp?in=wtdkl%20%3D",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js3_notags_fp?in=wtdkl%20%3D HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["695"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:28 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eJavaScript injection in JS executable context, no tags characters - exploitable (js.3)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = {\n                        node : '#mediasportsscoreboardgrandslam',\n                        league : 'nfl',\n                        team : '',\n                        refresh: '1',\n                        frequency: '15000',\n                        date: '',\n                        week: '1',\n                        good: 'wtdkl =',\n                        phase: '2',\n                        conf: '',\n                        maxAge: '10',\n                        division: '',\n                        season: '2014',\n                        xhrPath: ''\n                        };\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates exploitable Injection into JS executable context, with \u0026lt; and \u0026gt; (tag characters) filtered out.\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/full1\", using HTTP method GET. The sent data was: \"in=\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/full1",
            "httpTransactions": [
                {
                    "id": 375,
                    "url": "http://192.168.1.35:8082/xss/reflect/full1?in=pvm3j%3C%2F-%3Epvm3j%2F%2Apvm3j%22pvm3jpvm3j%27pvm3jpvm3j%60pvm3jpvm3j%20%3D",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/full1?in=pvm3j%3C%2F-%3Epvm3j%2F%2Apvm3j%22pvm3jpvm3j%27pvm3jpvm3j%60pvm3jpvm3j%20%3D HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["230"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:29 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eFull Javascript Injection (full.1)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        Hello!\u003cBR\u003e\n                        The value of cgi parameter \u0026quot;in\u0026quot; is: pvm3j\u003c/-\u003epvm3j/*pvm3j\"pvm3jpvm3j'pvm3jpvm3j`pvm3jpvm3j =\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js4_dq_fp\", using HTTP method GET. The sent data was: \"in=nqqey%3C%2F-%3E\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js4_dq_fp",
            "httpTransactions": [
                {
                    "id": 349,
                    "url": "http://192.168.1.35:8082/xss/reflect/js4_dq_fp?in=nqqey%3C%2F-%3E",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js4_dq_fp?in=nqqey%3C%2F-%3E HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["471"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:28 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eJavaScript and double-quote injection in JS block (js.4)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = {\n                        date: \"\",\n                        week: \"1\",\n                        good: \"nqqey\u003c/-\u003e\",\n                        phase: \"2\",\n                        };\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates a false positive related to injection of double quotes into a Javascript block.  It is a false positive since double quotes and backslashes are escaped.\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/enc2\", using HTTP method GET. The sent data was: \"in=fwrfj%2F%2A\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/enc2",
            "httpTransactions": [
                {
                    "id": 368,
                    "url": "http://192.168.1.35:8082/xss/reflect/enc2?in=fwrfj%2F%2A",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/enc2?in=fwrfj%2F%2A HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["361"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:29 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eIinjection in Javascript with double quotes but not backslash escaped with backslash - exploitable (enc.2)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = \"fwrfj/*\";\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates injection in JS with double quotes but not backslash escaped with backslash.\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/onmouseover_unquoted\", using HTTP method GET. The sent data was: \"in=coind%20%3D\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/onmouseover_unquoted",
            "httpTransactions": [
                {
                    "id": 320,
                    "url": "http://192.168.1.35:8082/xss/reflect/onmouseover_unquoted?in=coind%20%3D",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/onmouseover_unquoted?in=coind%20%3D HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["367"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:28 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eReflected XSS - attribute injection in tags (dq.2)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cH2\u003eUpdate Your Preferences\u003c/H2\u003e\u003cp\u003e\n                        \u003cFORM action=\"http://foobar.yahoo.com\"\u003e\n                        Homepage: \u003cinput value=coind = name=\"hp\" size=\"40\"\u003e\u003cBR\u003e\n                        \u003cinput type=\"submit\" value=\"Change\"\u003e\u003c/FORM\u003e\n                        \u003cp\u003e\u003cA href=\"http://foobar.yahoo.com\"\u003eYour homepage\u003c/A\u003e\u003cBR\u003e\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js3_fp\", using HTTP method GET. The sent data was: \"in=oyrjz%60oyrjz\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js3_fp",
            "httpTransactions": [
                {
                    "id": 360,
                    "url": "http://192.168.1.35:8082/xss/reflect/js3_fp?in=oyrjz%60oyrjz",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js3_fp?in=oyrjz%60oyrjz HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["523"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:29 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = {\n                        node : '#mediasportsscoreboardgrandslam',\n                        league : 'nfl',\n                        team : '',\n                        refresh: '1',\n                        frequency: '15000',\n                        date: '',\n                        week: '1',\n                        good: 'oyrjz`oyrjz',\n                        phase: '2',\n                        conf: '',\n                        maxAge: '10',\n                        division: '',\n                        season: '2014',\n                        xhrPath: ''\n                        };\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates false positive on injection into Javascript properly-quoted string.\n\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js3\", using HTTP method GET. The sent data was: \"in=htpg4%2F%2A\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js3",
            "httpTransactions": [
                {
                    "id": 399,
                    "url": "http://192.168.1.35:8082/xss/reflect/js3?in=htpg4%2F%2A",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js3?in=htpg4%2F%2A HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["373"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:30 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eJavaScript injection in JS executable context - exploitable (js.3)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = {\n                        date: '',\n                        week: '1',\n                        bad: htpg4/*,\n                        phase: '2',\n                        };\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates exploitable Injection into JS executable context.\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/onmouseover_fp\", using HTTP method GET. The sent data was: \"in=ahkyf%22ahkyf\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/onmouseover_fp",
            "httpTransactions": [
                {
                    "id": 411,
                    "url": "http://192.168.1.35:8082/xss/reflect/onmouseover_fp?in=ahkyf%22ahkyf",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/onmouseover_fp?in=ahkyf%22ahkyf HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["375"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:30 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eReflected XSS - attribute injection in tags (dq.2)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cH2\u003eUpdate Your Preferences\u003c/H2\u003e\u003cp\u003e\n                        \u003cFORM action=\"http://foobar.yahoo.com\"\u003e\n                        Homepage: \u003cinput value=\"ahkyf\"ahkyf\" name=\"hp\" size=\"40\"\u003e\u003cBR\u003e\n                        \u003cinput type=\"submit\" value=\"Change\"\u003e\u003c/FORM\u003e\n                        \u003cp\u003e\u003cA href=\"http://foobar.yahoo.com\"\u003eYour homepage\u003c/A\u003e\u003cBR\u003e\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n\n\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/onmouseover_div_unquoted\", using HTTP method GET. The sent data was: \"in=qmsg3%20%3D\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/onmouseover_div_unquoted",
            "httpTransactions": [
                {
                    "id": 391,
                    "url": "http://192.168.1.35:8082/xss/reflect/onmouseover_div_unquoted?in=qmsg3%20%3D",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/onmouseover_div_unquoted?in=qmsg3%20%3D HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["269"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:30 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eOnmouseover attribute injection\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        Hello!\u003cBR\u003e\n                        \u003cdiv class=qmsg3 =\u003e123\u003c/div\u003e\n\n                        This examples inject user input into the class attribute of a div, the quotes and tag characters are filtered out.\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/raw1_fp\", using HTTP method GET. The sent data was: \"in=7rsna%2F%2A\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/raw1_fp",
            "httpTransactions": [
                {
                    "id": 437,
                    "url": "http://192.168.1.35:8082/xss/reflect/raw1_fp?in=7rsna%2F%2A",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/raw1_fp?in=7rsna%2F%2A HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["413"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:31 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eReflected raw tags (raw.1)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        Hello! This is a test for potential false positive on raw tags echoed.  In this case, the injection is echoed inside of a quoted Javascript string (see page source).\n\n                        \u003cscript  type=\"text/javascript\"\u003efunction foo() {a=\"some text with 7rsna/* tag inside Javascript quoted string (false positive)\"}\u003c/script\u003e\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js_script_close\", using HTTP method GET. The sent data was: \"in=m3vkd%3C%2F-%3E\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js_script_close",
            "httpTransactions": [
                {
                    "id": 444,
                    "url": "http://192.168.1.35:8082/xss/reflect/js_script_close?in=m3vkd%3C%2F-%3E",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js_script_close?in=m3vkd%3C%2F-%3E HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["651"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:31 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eclosing script tag injection in properly quoted strings \u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = {\n                        node : '#mediasportsscoreboardgrandslam',\n                        league : 'nfl',\n                        team : '',\n                        refresh: '1',\n                        frequency: '15000',\n                        date: '',\n                        week: '1',\n                        good: 'm3vkd\u003c/-\u003e',\n                        phase: '2',\n                        conf: '',\n                        maxAge: '10',\n                        division: '',\n                        season: '2014',\n                        xhrPath: ''\n                        };\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates  injection of a script closing tag inside of a  Javascript properly-quoted string.\n\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js3_notags\", using HTTP method GET. The sent data was: \"in=nggll%2F%2A\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js3_notags",
            "httpTransactions": [
                {
                    "id": 422,
                    "url": "http://192.168.1.35:8082/xss/reflect/js3_notags?in=nggll%2F%2A",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js3_notags?in=nggll%2F%2A HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["692"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:31 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eJavaScript injection in JS executable context, no tags characters - exploitable (js.3)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cscript language=\"javascript\"\u003e\n                        var f = {\n                        node : '#mediasportsscoreboardgrandslam',\n                        league : 'nfl',\n                        team : '',\n                        refresh: '1',\n                        frequency: '15000',\n                        date: '',\n                        week: '1',\n                        bad: nggll/*,\n                        phase: '2',\n                        conf: '',\n                        maxAge: '10',\n                        division: '',\n                        season: '2014',\n                        xhrPath: ''\n                        };\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates exploitable Injection into JS executable context, with \u0026lt; and \u0026gt; (tag characters) filtered out.\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/post1\", using HTTP method POST. The sent post-data was: \"in=\" which modifies the \"in\" parameter.\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/post1",
            "httpTransactions": [
                {
                    "id": 551,
                    "url": "http://192.168.1.35:8082/xss/reflect/post1",
                    "params": ["in"],
                    "method": "POST",
                    "request": {
                        "status": "POST http://192.168.1.35:8082/xss/reflect/post1 HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Content-Length": ["79"],
                            "Content-Type": ["application/x-www-form-urlencoded"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        },
                        "body": {
                            "contentEncoding": "base64",
                            "content": "aW49MHVzaXIlM0MlMkYtJTNFMHVzaXIlMkYlMkEwdXNpciUyMjB1c2lyM"
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["367"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:34 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eReflected XSS in POST processing (post.1)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cH2\u003ePost Full Javascript injection test\u003c/H2\u003e\n                        \u003cp\u003e\n                        \u003cFORM method=\"POST\" action=\"post1\"\u003e\n                        \u003cINPUT type=\"text\" id=\"in\" name=\"in\" size=\"40\" value=\"0usir\u003c/-\u003e0usir/*0usir\"0usir0usir'0usir0usir`0usir0usir =\"\u003e\n                        \u003cINPUT type=\"Submit\" value=\"Search!\"\u003e\n                        \u003c/FORM\u003e\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/oneclick1\", using HTTP method GET. The sent data was: \"in=unird%2F%2A\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/oneclick1",
            "httpTransactions": [
                {
                    "id": 535,
                    "url": "http://192.168.1.35:8082/xss/reflect/oneclick1?in=unird%2F%2A",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/oneclick1?in=unird%2F%2A HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["376"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:33 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eJavaScript injection into href link source\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003c!-- global link start //--\u003e\n                        This test demonstrates injection of Javascript into the href source of an html link (\u0026lt;a\u0026gt; element). \u003cp /\u003e\n                        \u003ca href=\"unird/*/*http://example.com\" class=\"open\" rel=\"nofollow\"\u003e我要賣東西\u003c/a\u003e\n                        \u003c!-- global link end//--\u003e\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    },
    {
        "summary": "Cross site scripting vulnerability",
        "severity": "medium",
        "references": [
            {
                "url": "http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting",
                "title": "WASC"
            },
            {
                "url": "http://secunia.com/advisories/9716/",
                "title": "Secunia"
            },
            {
                "url": "http://ha.ckers.org/xss.html",
                "title": "ha.ckers"
            },
            {
                "url": "https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet",
                "title": "OWASP"
            }
        ],
        "desc": "A Cross Site Scripting vulnerability was found at: \"http://192.168.1.35:8082/xss/reflect/js6_sq_combo1\", using HTTP method GET. The sent data was: \"in=rkbue%27rkbue\" The modified parameter was \"in\".\n\n Client-side scripts are used extensively by modern web applications. They perform from simple functions (such as the formatting of text) up to full manipulation of client-side data and Operating System interaction.\n\n            Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into a request and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, from the client) and reusing it without performing any validation or encoding.\n\n###Fix guidance:\n To remedy XSS vulnerabilities, it is important to never use untrusted or unfiltered data within the code of a HTML page.\n\n            Untrusted data can originate not only form the client but potentially a third party or previously uploaded file etc. Filtering of untrusted data typically involves converting special characters to their HTML entity encoded counterparts (however, other methods do exist, see references). These special characters include:\n\n            * `\u0026`\n            * `\u003c`\n            * `\u003e`\n            * `\"`\n            * `'`\n            * `/`\n\n\n            An example of HTML entity encoding is converting `\u003c` to `\u0026lt;`. Although it is possible to filter untrusted input, there are five locations within an HTML page where untrusted input (even if it has been filtered) should never be placed:\n\n            1. Directly in a script.\n            2. Inside an HTML comment.\n            3. In an attribute name.\n            4. In a tag name.\n            5. Directly in CSS.\n\n\n            Each of these locations have their own form of escaping and filtering.\n\n            _Because many browsers attempt to implement XSS protection, any manual verification of this finding should be conducted using multiple different browsers and browser versions._",
        "vector": {
            "url": "http://192.168.1.35:8082/xss/reflect/js6_sq_combo1",
            "httpTransactions": [
                {
                    "id": 491,
                    "url": "http://192.168.1.35:8082/xss/reflect/js6_sq_combo1?in=rkbue%27rkbue",
                    "params": ["in"],
                    "method": "GET",
                    "request": {
                        "status": "GET http://192.168.1.35:8082/xss/reflect/js6_sq_combo1?in=rkbue%27rkbue HTTP/1.1",
                        "header": {
                            "Accept": ["*/*"],
                            "Accept-Encoding": ["gzip, deflate"],
                            "Host": ["192.168.1.35:8082"],
                            "Referer": ["http://192.168.1.35:8082/"],
                            "User-Agent": ["w3af.org"]
                        }
                    },
                    "response": {
                        "status": "HTTP/1.1 200 OK",
                        "header": {
                            "Content-Length": ["621"],
                            "Content-Type": ["text/html; charset=utf-8"],
                            "Date": ["Thu, 09 Apr 2015 20:45:32 GMT"]
                        },
                        "body": {
                            "contentEncoding": "text",
                            "content": "\n\n                        \u003c!DOCTYPE html\u003e\n                        \u003chtml\u003e\u003chead\u003e\u003ctitle\u003eJavaScript and single quote injection in JS block (js.6)\u003c/title\u003e\n\n                        \u003c/head\u003e\u003cbody\u003e\n\n\n                        \u003cform\u003e\n                        \u003cinput id=\"searchInput\" type=\"text\" name=\"question_box\" autocomplete=\"off\" title=\"Search input\" value=\"rkbue'rkbue\" onBlur=\"blurSearchHelp()\" onfocus=\"focusSearchHelp();\"/\u003e\n                        \u003c/form\u003e\n\n                        \u003cscript\u003e\n                        var keys = {A_pn:'Yahoo Help - Search Results', A_id:'source=answers.landing_search\u0026question_box=rkbue'rkbue', A_pt:'en_US', intl:'en_US'};\n                        \u003c/script\u003e\n\n                        Hello!\u003cBR\u003e\n                        This test demonstrates exploitable Injection due to unsafe handling of single quotes inside of a Javascript block.\n\n\n                        \u003c/body\u003e\u003c/html\u003e\n\n                    "
                        }
                    }
                }
            ]
        }
    }
]